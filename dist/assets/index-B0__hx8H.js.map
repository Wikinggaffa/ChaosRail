{"version":3,"file":"index-B0__hx8H.js","sources":["../../src/engine/time.ts","../../src/sim/line.ts","../../src/ui/renderer.ts","../../src/engine/rng.ts","../../src/engine/eventQueue.ts","../../src/systems/blocks.ts","../../src/systems/movement.ts","../../src/systems/boarding.ts","../../src/systems/spawn.ts","../../src/systems/breakdowns.ts","../../src/systems/delays.ts","../../src/systems/scoring.ts","../../src/scenes/Game.ts","../../src/main.ts"],"sourcesContent":["export type LoopHandlers = {\n  update: (dt: number) => void  // dt in seconds\n  render: (alpha: number) => void\n  simHz?: number\n}\n\nexport class FixedTimestepLoop {\n  private readonly update\n  private readonly render\n  private readonly dt\n  private acc = 0\n  private running = false\n  private last = 0\n\n  constructor(h: LoopHandlers){\n    this.update = h.update\n    this.render = h.render\n    const hz = h.simHz ?? 20\n    this.dt = 1 / hz\n  }\n\n  start(){\n    if(this.running) return\n    this.running = true\n    this.last = performance.now()\n    const frame = (now: number) => {\n      if(!this.running) return\n      let delta = (now - this.last) / 1000\n      if(delta > 0.25) delta = 0.25 // avoid spiral of death\n      this.last = now\n      this.acc += delta\n      while(this.acc >= this.dt){\n        this.update(this.dt)\n        this.acc -= this.dt\n      }\n      const alpha = this.acc / this.dt\n      this.render(alpha)\n      requestAnimationFrame(frame)\n    }\n    requestAnimationFrame(frame)\n  }\n\n  stop(){ this.running = false }\n}\n","import type { Line, Station, Segment, Tuning } from './types'\n\nexport async function loadJSON<T>(url: string): Promise<T>{\n  const r = await fetch(url)\n  if(!r.ok) throw new Error(`Failed to load ${url}: ${r.status}`)\n  return r.json() as Promise<T>\n}\n\n// TODO: cache results if needed\nexport async function loadLine(): Promise<Line>{\n  const [stations, segments, tuning] = await Promise.all([\n    loadJSON<Station[]>('/data/stations.json'),\n    loadJSON<Segment[]>('/data/segments.json'),\n    loadJSON<Tuning>('/data/tuning.json'),\n  ])\n  return { stations, segments, endpoints: tuning.line.endpoints as [number,number], depotStationId: tuning.line.depotStationId }\n}\n","import type { Train, Line } from '../sim/types';\nimport { loadJSON } from '../sim/line';\n\n// TODO: move to a more appropriate place\ninterface UiLayout {\n  colors: Record<string, string>;\n  sprites: Record<string, { w: number, h: number, r: number }>;\n  hud: {\n    actions: {\n      order: string[];\n      buttonSize: number;\n      gap: number;\n      anchor: string;\n      x: number;\n      y: number;\n    },\n    satisfaction: {\n      anchor: string;\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    }\n  }\n}\n\nexport class Renderer {\n  private ctx: CanvasRenderingContext2D\n  private uiLayout!: UiLayout;\n\n  constructor(private canvas: HTMLCanvasElement){\n    const ctx = canvas.getContext('2d')\n    if(!ctx) throw new Error('Canvas 2D not supported')\n    this.ctx = ctx\n    this.init();\n  }\n\n  private async init() {\n    this.uiLayout = await loadJSON<UiLayout>('/data/uiLayout.json');\n  }\n\n  clear(){\n    this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)\n  }\n\n  draw(trains: Train[], line: Line, selectedTrain: Train | null, satisfaction: number) {\n    if (!this.uiLayout) {\n      return;\n    }\n\n    // Draw segments\n    this.ctx.strokeStyle = this.uiLayout.colors.hudBg;\n    this.ctx.lineWidth = 2;\n    for (const segment of line.segments) {\n      const from = line.stations.find(s => s.id === segment.fromId);\n      const to = line.stations.find(s => s.id === segment.toId);\n      if (from && to) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(from.order * 50 + 25, 100);\n        this.ctx.lineTo(to.order * 50 + 25, 100);\n        this.ctx.stroke();\n      }\n    }\n\n    // Draw stations\n    for (const station of line.stations) {\n      this.ctx.fillStyle = this.uiLayout.colors.hudBg;\n      this.ctx.beginPath();\n      this.ctx.arc(station.order * 50 + 25, 100, this.uiLayout.sprites.station.r, 0, 2 * Math.PI);\n      this.ctx.fill();\n    }\n\n    // Draw trains\n    for (const train of trains) {\n      if (train.state === 'Running') {\n        const segment = line.segments[train.segmentIndex];\n        const from = line.stations.find(s => s.id === segment.fromId);\n        const to = line.stations.find(s => s.id === segment.toId);\n        if (from && to) {\n          const x = (from.order + (to.order - from.order) * (1 - train.nextEventTime / segment.travelSec)) * 50 + 25;\n          this.ctx.fillStyle = train === selectedTrain ? this.uiLayout.colors.warning : this.uiLayout.colors.ok;\n          this.ctx.fillRect(x - this.uiLayout.sprites.train.w / 2, 100 - this.uiLayout.sprites.train.h / 2, this.uiLayout.sprites.train.w, this.uiLayout.sprites.train.h);\n        }\n      }\n    }\n\n    // Draw actions\n    if (selectedTrain) {\n      const actions = this.uiLayout.hud.actions;\n      for (let i = 0; i < actions.order.length; i++) {\n        const action = actions.order[i];\n        const x = this.canvas.width + actions.x - (actions.order.length - i) * (actions.buttonSize + actions.gap);\n        const y = this.canvas.height + actions.y - actions.buttonSize;\n        this.ctx.fillStyle = this.uiLayout.colors.hudBg;\n        this.ctx.fillRect(x, y, actions.buttonSize, actions.buttonSize);\n        this.ctx.fillStyle = this.uiLayout.colors.hudText;\n        this.ctx.font = '12px sans-serif';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText(action, x + actions.buttonSize / 2, y + actions.buttonSize / 2);\n      }\n    }\n\n    // Draw satisfaction\n    const satisfactionLayout = this.uiLayout.hud.satisfaction;\n    this.ctx.fillStyle = this.uiLayout.colors.hudBg;\n    this.ctx.fillRect(satisfactionLayout.x, satisfactionLayout.y, satisfactionLayout.width, satisfactionLayout.height);\n    this.ctx.fillStyle = this.uiLayout.colors.ok;\n    this.ctx.fillRect(satisfactionLayout.x, satisfactionLayout.y, satisfactionLayout.width * (satisfaction / 100), satisfactionLayout.height);\n    this.ctx.fillStyle = this.uiLayout.colors.hudText;\n    this.ctx.font = '12px sans-serif';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(`Satisfaction: ${satisfaction.toFixed(0)}%`, satisfactionLayout.x + satisfactionLayout.width / 2, satisfactionLayout.y + satisfactionLayout.height / 2);\n  }\n\n  drawEndDayReport(satisfaction: number) {\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.ctx.fillStyle = this.uiLayout.colors.hudText;\n    this.ctx.font = '32px sans-serif';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText('End of Day', this.canvas.width / 2, this.canvas.height / 2 - 50);\n\n    this.ctx.font = '24px sans-serif';\n    this.ctx.fillText(`Final Satisfaction: ${satisfaction.toFixed(0)}%`, this.canvas.widh / 2, this.canvas.height / 2);\n\n    const message = satisfaction >= 60 ? 'You Win!' : 'You Lose!';\n    this.ctx.font = '48px sans-serif';\n    this.ctx.fillStyle = satisfaction >= 60 ? this.uiLayout.colors.ok : this.uiLayout.colors.danger;\n    this.ctx.fillText(message, this.canvas.width / 2, this.canvas.height / 2 + 50);\n  }\n}\n","export class Mulberry32 {\n  private seed: number\n  constructor(seed: number){ this.seed = seed >>> 0 }\n  next(): number {\n    let t = this.seed += 0x6D2B79F5\n    t = Math.imul(t ^ (t >>> 15), t | 1)\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61)\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296\n  }\n  nextInt(max: number){ return Math.floor(this.next() * max) }\n  range(min: number, max: number){ return min + (max - min) * this.next() }\n}\n","// Minimal event queue stub. TODO: implement priorities & timestamps.\nexport type SimEvent = { t: number, type: string, payload?: any }\nexport class EventQueue {\n  private q: SimEvent[] = []\n  push(e: SimEvent){ this.q.push(e); this.q.sort((a,b)=>a.t-b.t) }\n  peek(): SimEvent | undefined { return this.q[0] }\n  pop(): SimEvent | undefined { return this.q.shift() }\n  clear(){ this.q.length = 0 }\n  get size(){ return this.q.length }\n}\n","import type { Train, Line } from '../sim/types';\n\nconst blocks = new Set<number>();\n\nexport function isBlockOccupied(segmentId: number): boolean {\n  return blocks.has(segmentId);\n}\n\nexport function occupyBlock(segmentId: number) {\n  blocks.add(segmentId);\n}\n\nexport function releaseBlock(segmentId: number) {\n  blocks.delete(segmentId);\n}","import type { Train, Line, Segment } from '../sim/types';\nimport { isBlockOccupied, occupyBlock, releaseBlock } from './blocks';\n\nexport function updateTrainMovement(train: Train, line: Line, dt: number) {\n  if (train.state !== 'Running') {\n    return;\n  }\n\n  train.nextEventTime -= dt;\n\n  if (train.nextEventTime <= 0) {\n    const currentSegment = line.segments[train.segmentIndex];\n    const nextSegmentIndex = train.segmentIndex + train.dir;\n    const nextSegment = line.segments[nextSegmentIndex];\n\n    if (nextSegment) {\n      if (!isBlockOccupied(nextSegmentIndex)) {\n        releaseBlock(train.segmentIndex);\n        occupyBlock(nextSegmentIndex);\n        train.segmentIndex = nextSegmentIndex;\n        train.nextEventTime = nextSegment.travelSec;\n      }\n    } else {\n      // End of the line, turn back\n      train.dir *= -1;\n      const nextSegmentIndex = train.segmentIndex + train.dir;\n      if (!isBlockOccupied(nextSegmentIndex)) {\n        releaseBlock(train.segmentIndex);\n        occupyBlock(nextSegmentIndex);\n        train.segmentIndex = nextSegmentIndex;\n        train.nextEventTime = line.segments[train.segmentIndex].travelSec;\n      }\n    }\n  }\n}\n","import type { Train, Station, Passenger, Tuning, Line } from '../sim/types';\n\n// TODO: Implement dwell formula and FIFO boarding/alighting.\n// dwellSec = clamp(min, base + perPax*(board+alight), max)\n// Stop boarding if onboard > capacityCrush.\nexport function computeDwellSeconds(board: number, alight: number, base: number, per: number, min: number, max: number){\n  const v = base + per*(board + alight)\n  return Math.max(min, Math.min(max, v))\n}\n\nexport function handleBoarding(train: Train, station: Station, queue: Passenger[], tuning: Tuning, line: Line) {\n  // Alighting passengers\n  const alightingPassengers = train.passengers.filter(p => p.destId === station.id);\n  train.passengers = train.passengers.filter(p => p.destId !== station.id);\n  const alight = alightingPassengers.length;\n  train.onboard -= alight;\n\n  // Boarding passengers\n  const boardingPassengers = queue.filter(p => {\n    const originStation = line.stations.find(s => s.id === p.originId);\n    const destStation = line.stations.find(s => s.id === p.destId);\n    if (!originStation || !destStation) {\n      return false;\n    }\n    return (destStation.order - originStation.order) * train.dir > 0;\n  });\n\n  const space = train.capacityCrush - train.onboard;\n  const numToBoard = Math.min(boardingPassengers.length, space);\n  const boarding = boardingPassengers.slice(0, numToBoard);\n\n  for (const p of boarding) {\n    p.state = 'OnTrain';\n    train.passengers.push(p);\n    const index = queue.indexOf(p);\n    if (index > -1) {\n      queue.splice(index, 1);\n    }\n  }\n  train.onboard += boarding.length;\n\n  const dwellTime = computeDwellSeconds(\n    boarding.length,\n    alight,\n    tuning.dwell.baseSec,\n    tuning.dwell.perPaxSec,\n    tuning.dwell.minSec,\n    tuning.dwell.maxSec\n  );\n\n  train.state = 'Dwell';\n  train.nextEventTime = dwellTime;\n}\n","import type { Station, Tuning, Passenger, StationType, Line } from '../sim/types';\nimport { Mulberry32 } from '../engine/rng';\n\nlet passengerId = 0;\n\nexport function spawnPassengers(\n  station: Station,\n  line: Line,\n  tuning: Tuning,\n  rng: Mulberry32,\n  dayPercent: number,\n  dt: number\n): Passenger[] {\n  const stationType: StationType = station.type;\n  const baseRate = tuning.spawn.basePerMin[stationType] / 60; // per second\n  const curve = getCurveValue(tuning.spawn.curve, dayPercent);\n  const noise = rng.next(tuning.spawn.tickNoiseUniform[0], tuning.spawn.tickNoiseUniform[1]);\n  const spawnRate = baseRate * curve * noise;\n\n  const numToSpawn = Math.floor(spawnRate * dt);\n  const passengers: Passenger[] = [];\n  const stationIds = line.stations.map(s => s.id);\n\n  for (let i = 0; i < numToSpawn; i++) {\n    let destId = station.id;\n    while (destId === station.id) {\n      destId = stationIds[Math.floor(rng.next(0, stationIds.length))];\n    }\n\n    passengers.push({\n      id: passengerId++,\n      originId: station.id,\n      destId,\n      frustration: 0,\n      state: 'Queue',\n    });\n  }\n\n  return passengers;\n}\n\nfunction getCurveValue(\n  curve: { segments: { t0: number, t1: number, v0: number, v1: number }[] },\n  t: number\n): number {\n  for (const segment of curve.segments) {\n    if (t >= segment.t0 && t <= segment.t1) {\n      const p = (t - segment.t0) / (segment.t1 - segment.t0);\n      return segment.v0 + p * (segment.v1 - segment.v0);\n    }\n  }\n  return 0;\n}\n","import type { Train, Tuning } from '../sim/types';\nimport { Mulberry32 } from '../engine/rng';\nimport { occupyBlock, releaseBlock } from './blocks';\n\nexport class BreakdownSystem {\n  constructor(private tuning: Tuning, private rng: Mulberry32) {}\n\n  update(trains: Train[], dayPercent: number, dt: number) {\n    for (const train of trains) {\n      if (train.state === 'Running') {\n        const lambda = 0.6 * dayPercent / 60; // per second\n        if (this.rng.next(0, 1) < lambda * dt) {\n          train.state = 'Breakdown';\n          const duration = this.rng.next(this.tuning.hazard.durationSecRange[0], this.tuning.hazard.durationSecRange[1]);\n          train.nextEventTime = duration;\n          occupyBlock(train.segmentIndex);\n        }\n      } else if (train.state === 'Breakdown') {\n        train.nextEventTime -= dt;\n        if (train.nextEventTime <= 0) {\n          train.state = 'Removed';\n          releaseBlock(train.segmentIndex);\n        }\n      }\n    }\n  }\n}\n","import type { Train, Tuning } from '../sim/types';\nimport { Mulberry32 } from '../engine/rng';\n\nexport class DelaySystem {\n  constructor(private tuning: Tuning, private rng: Mulberry32) {}\n\n  applyDelays(trains: Train[], dt: number) {\n    for (const train of trains) {\n      if (train.state === 'Running') {\n        // Simplified delay logic\n        if (this.rng.next(0, 1) < 0.1 * dt) { // 10% chance of delay per second\n          train.nextEventTime *= this.tuning.delays.speedFactor;\n        }\n      } else if (train.state === 'Dwell') {\n        if (this.rng.next(0, 1) < 0.1 * dt) { // 10% chance of delay per second\n          train.nextEventTime *= this.tuning.delays.dwellFactor;\n        }\n      }\n    }\n  }\n}\n","import type { Passenger, Tuning } from '../sim/types';\n\n// TODO: Track frustration deltas and compute satisfaction.\nexport function computeSatisfaction(avgFrustration: number){ return Math.max(0, 100 - avgFrustration) }\n\nexport function updateFrustration(passengers: Passenger[], tuning: Tuning, dt: number) {\n  for (const p of passengers) {\n    if (p.state === 'Queue') {\n      p.frustration += tuning.frustration.waitingPerSec * dt;\n    } else if (p.state === 'OnTrain') {\n      p.frustration -= tuning.frustration.onTrainDecayPerSec * dt;\n    }\n  }\n}\n","import { Renderer } from '../ui/renderer'\nimport { Mulberry32 } from '../engine/rng'\nimport { loadLine, loadJSON } from '../sim/line'\nimport type { Tuning, Line, Train, Passenger, Station } from '../sim/types'\nimport { EventQueue } from '../engine/eventQueue'\nimport { updateTrainMovement } from '../systems/movement'\nimport { handleBoarding } from '../systems/boarding'\nimport { spawnPassengers } from '../systems/spawn'\nimport { occupyBlock } from '../systems/blocks'\nimport { BreakdownSystem } from '../systems/breakdowns'\nimport { DelaySystem } from '../systems/delays'\nimport { updateFrustration, computeSatisfaction } from '../systems/scoring'\n\nexport class Game {\n  private renderer: Renderer\n  public tick = 0\n  private rng = new Mulberry32(1337)\n  private tuning!: Tuning\n  private line!: Line\n  private trains: Train[] = []\n  private passengers: Passenger[] = []\n  private stationQueues: Map<number, Passenger[]> = new Map()\n  private eventQueue = new EventQueue()\n  private dayTime = 0;\n  private selectedTrain: Train | null = null;\n  private breakdownSystem!: BreakdownSystem;\n  private delaySystem!: DelaySystem;\n  private satisfaction = 100;\n  private isDayOver = false;\n\n  constructor(private canvas: HTMLCanvasElement){\n    this.renderer = new Renderer(canvas)\n    // Kick off async data load; keep minimal until ready.\n    this.init()\n    this.canvas.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  private async init(){\n    this.tuning = await loadJSON<Tuning>('/data/tuning.json')\n    this.line = await loadLine()\n    this.breakdownSystem = new BreakdownSystem(this.tuning, this.rng);\n    this.delaySystem = new DelaySystem(this.tuning, this.rng);\n\n    for (const station of this.line.stations) {\n      this.stationQueues.set(station.id, []);\n    }\n\n    for (let i = 0; i < this.tuning.line.maxTrains; i++) {\n      const segmentIndex = i * 2;\n      const train: Train = {\n        id: i,\n        state: 'Running',\n        dir: 1,\n        segmentIndex,\n        onboard: 0,\n        passengers: [],\n        capacityNominal: this.tuning.capacity.nominal,\n        capacityCrush: this.tuning.capacity.crush,\n        nextEventTime: this.line.segments[segmentIndex].travelSec,\n      };\n      this.trains.push(train);\n      occupyBlock(segmentIndex);\n    }\n  }\n\n  update(dt: number){\n    if (this.isDayOver) {\n      return;\n    }\n\n    this.tick++\n    this.dayTime += dt;\n    const dayPercent = this.dayTime / this.tuning.sim.dayLengthSec;\n\n    // Spawn passengers\n    for (const station of this.line.stations) {\n      const newPassengers = spawnPassengers(station, this.line, this.tuning, this.rng, dayPercent, dt);\n      this.passengers.push(...newPassengers);\n      const queue = this.stationQueues.get(station.id)!;\n      queue.push(...newPassengers);\n    }\n\n    updateFrustration(this.passengers, this.tuning, dt);\n\n    this.breakdownSystem.update(this.trains, dayPercent, dt);\n    this.delaySystem.applyDelays(this.trains, dt);\n\n    for (const train of this.trains) {\n      if (train.state === 'Running') {\n        updateTrainMovement(train, this.line, dt);\n        if (train.nextEventTime <= 0) {\n          const segment = this.line.segments[train.segmentIndex];\n          const station = this.line.stations.find(s => s.id === segment.toId);\n          if (station) {\n            handleBoarding(train, station, this.stationQueues.get(station.id)!, this.tuning, this.line);\n          }\n        }\n      } else if (train.state === 'Dwell') {\n        train.nextEventTime -= dt;\n        if (train.nextEventTime <= 0) {\n          train.state = 'Running';\n        }\n      }\n    }\n\n    if (this.dayTime >= this.tuning.sim.dayLengthSec) {\n      this.endDay();\n    }\n  }\n\n  render(alpha: number){\n    this.renderer.clear()\n    this.renderer.draw(this.trains, this.line, this.selectedTrain, this.satisfaction);\n\n    if (this.isDayOver) {\n      this.renderer.drawEndDayReport(this.satisfaction);\n    }\n  }\n\n  private handleClick(event: MouseEvent) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Check if a train was clicked\n    for (const train of this.trains) {\n      const segment = this.line.segments[train.segmentIndex];\n      const from = this.line.stations.find(s => s.id === segment.fromId);\n      const to = this.line.stations.find(s => s.id === segment.toId);\n      if (from && to) {\n        const trainX = (from.order + (to.order - from.order) * (1 - train.nextEventTime / segment.travelSec)) * 50 + 25;\n        if (x >= trainX - 24 && x <= trainX + 24 && y >= 100 - 8 && y <= 100 + 8) {\n          this.selectedTrain = train;\n          return;\n        }\n      }\n    }\n\n    // Check if an action button was clicked\n    if (this.selectedTrain) {\n      const actions = this.tuning.hud.actions;\n      for (let i = 0; i < actions.order.length; i++) {\n        const action = actions.order[i];\n        const buttonX = this.canvas.width + actions.x - (actions.order.length - i) * (actions.buttonSize + actions.gap);\n        const buttonY = this.canvas.height + actions.y - actions.buttonSize;\n        if (x >= buttonX && x <= buttonX + actions.buttonSize && y >= buttonY && y <= buttonY + actions.buttonSize) {\n          this.handleAction(action);\n          return;\n        }\n      }\n    }\n\n    this.selectedTrain = null;\n  }\n\n  private handleAction(action: string) {\n    if (!this.selectedTrain) {\n      return;\n    }\n\n    switch (action) {\n      case 'reverse':\n        this.selectedTrain.dir *= -1;\n        break;\n      case 'skip':\n        // TODO\n        break;\n      case 'cancel':\n        // TODO\n        break;\n      case 'forceEmpty':\n        this.selectedTrain.passengers = [];\n        this.selectedTrain.onboard = 0;\n        break;\n    }\n\n    this.selectedTrain = null;\n  }\n\n  private endDay() {\n    let totalFrustration = 0;\n    for (const p of this.passengers) {\n      totalFrustration += p.frustration;\n    }\n    const avgFrustration = this.passengers.length > 0 ? totalFrustration / this.passengers.length : 0;\n    this.satisfaction = computeSatisfaction(avgFrustration);\n    this.isDayOver = true;\n  }\n}\n","import { FixedTimestepLoop } from './engine/time'\nimport { Game } from './scenes/Game'\n\nconst canvas = document.getElementById('view') as HTMLCanvasElement\nconst tickEl = document.getElementById('tick') as HTMLSpanElement\n\nconst game = new Game(canvas)\n\nconst loop = new FixedTimestepLoop({\n  update: (dt) => {\n    game.update(dt)\n    tickEl.textContent = `tick: ${game.tick}`\n  },\n  render: (alpha) => game.render(alpha),\n  simHz: 20\n})\n\nloop.start()\n"],"names":["FixedTimestepLoop","h","__publicField","hz","frame","now","delta","alpha","loadJSON","url","r","loadLine","stations","segments","tuning","Renderer","canvas","ctx","trains","line","selectedTrain","satisfaction","segment","from","s","to","station","train","x","actions","i","action","y","satisfactionLayout","message","Mulberry32","seed","max","min","EventQueue","e","a","b","blocks","isBlockOccupied","segmentId","occupyBlock","releaseBlock","updateTrainMovement","dt","nextSegmentIndex","nextSegment","computeDwellSeconds","board","alight","base","per","v","handleBoarding","queue","alightingPassengers","p","boardingPassengers","originStation","destStation","space","numToBoard","boarding","index","dwellTime","passengerId","spawnPassengers","rng","dayPercent","stationType","baseRate","curve","getCurveValue","noise","spawnRate","numToSpawn","passengers","stationIds","destId","BreakdownSystem","lambda","duration","DelaySystem","computeSatisfaction","avgFrustration","updateFrustration","Game","segmentIndex","newPassengers","event","rect","trainX","buttonX","buttonY","totalFrustration","tickEl","game","loop"],"mappings":"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"}